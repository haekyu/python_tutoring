- 괄호!!!!
	- []
		: list 를 정의할 때
		: 인덱스를 감쌀 때
	- ()
		: 함수의 인풋을 감쌀 때
- 데이터 타입
	- primitive data type
	- series data type (list)
		== list 를 만드는 규칙
			+ 대괄호로 열고 닫아
			+ 대괄호 안에 원소들을 순서대로 나열해
			+ 각각 원소는 , 로 구분1
			- lst = [1, 2, 3, 4]
			- lst2 = [4, 3, '2', 1, 'ㅇ', True, [3,2, 1]]
			- lst != lst2
		- Sequence!
			- len(lst)
			- index
				+ 0으로 시작!
			- indexing
				+ lst[0]
			- slicing
				+ [from 이상 : to 미만]
		- list 연산
			- + *
		- list의 함수
			- 어떤리스트.append(덧붙이고싶은 원소)
			- 어떤리스트.index('a')

- 다른 연산자
	+ 비교 연산자
		+ ==: equals?
		+ !=: not equals?
			+ 3 != 4
			+ not (3 == 4)
		+ >
			- >>> "abf" > "aaa3"
				True
			- 사전 순서상
			- >>> True >= True
				True
				>>> False >= True
				False
		+ <
		+ >=
		+ <=
	+ Assign 한다
		== 값을 준다?
		== 값을 대입한다
		== define 한
		+ 변수
			+ x = 3
				== x라는 변수에다가 3이라는 값을 대입
		+ 변수이름 규칙
			- 조합: {a-z, A-Z, 0-9, _}: 영어 숫자 언더바	
				+ space XXXXXXXXXXX
				+ tab XXXXXXXXXX
				+ ! XXXXX
				+ ? XXXXX
				+ - XXXXX
			- 규칙
				+ 영어 먼저!
			- 예)
				+ x, myStr3434ing, my___String2, mysTrgin242342
				+ berry_is_Abbysinian
				+ berryIsAbbysinian
				+ a, b, c, d, e, idx_of_this_lst, iotl
				+ list -> lst
				+ index -> idx
				+ maximum -> max


- 연산
	- 연산자 == operator
	- 연산의 input == operand
	- primitive data type의 연산
		- Boolean
			+ Bool Type
			+ True / False == 1 / 0
			+ not (True) == False
			+ and (== 교집합, *)
				+ True and True == True
				+ True and False == False
				+ False and True == False
				+ False and False == False
			+ or (== 합집합, +)
				+ True or True == True
				+ True or False == True
				+ False or True == True
				+ False or False == False
			+ True and (False and True) == False
		- 숫자 (int, float)
			+ 사칙연산: + - * /
			+ modular: % == (~으로 나눈 나머지)
				- 5 % 2 == 1
				- 3.4 % 2 == 1.4
			+ 몫: // 
				- 5 // 2 == 2
		- 문자
			+ 사칙연산 비슷한 것들
				+ +: "abc" + "321" == "abc321"
					= concatenate
				+ *: "abc" * 3 == "abcabcabc"
					= multiply
			+ sequence 관점에서의 연산자
				+ len()
					+ s = "abc"
					+ len(s) == 3
					+ len("sdfsdfs") == 7
				+ 순서? 몇 번째 글자?
					+ 대괄호! + 인덱스가 뭔지 + 인덱스 범위 표현 방식!
					+ index == 몇 번째 순서 (숫자)
						+ !!!!!!!!! index는 0부터 시작
						+ "abcde".index("c") == 2
					+ 인덱스 얻기?
						- 원하는 문자의 인덱스(위치) 얻기
						- "abcde".index("c") == 2
						- "abcde".find("c") == 2
					+ indexing
						+ index 번째 위치의 글자를 가져오는 행위
						+ "abcdef"[3] == "d"
						+ "abcdef"[-1] == "f"
					+ slicing
						+ index 범위의 글자들을 가져오는 행위
						+ range 표현: [<from 이상> : <to 미만>]
						+ "abcdef"[0 : 4] == "abcd"
						+ 예제
							>>> s = "abcde"
							>>> s[-3: -1]
							'cd'
							>>> s[-3: 0]
							''
							>>> s[-3: ]
							'cde'
							>>> s[:]
							'abcde'
							>>> s[:3]
							'abc'

- 데이터
	+ 기본 데이터 
		- primitive data type
			+ 숫자
				- int: 정수
					+ -3, 2, 1, 0, ...
				- float: 실수
					+ 3.14...., -3.23423
			+ 문자
				- string
					+ "abc", "555", "한글", "ㄴㅇㄹ234sdf"
					+ 'abc', '555', '한글', 'ㄴㅇㄹ234sdf'
			+ 참거짓
				- Boolean
				- True / False
		- 형 변환
			- 321 -> "321" -> 321
			- 321.0 -> 321 -> 321.0
			- str(True) == 'True'
			- float(321) == 321.0
			- int(321.7) == 321
				== 버림
				+ cf) round(3.61) == 4 (반올림)
	+ 새로 디자인 하는 데이터
		- class

- algorithm
	+ input
	+ 과정 : input 이라는 데이터 + 연산
	+ output


- 데이터
- 기본 연산자
- 기본 문법
